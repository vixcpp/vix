name: build

on:
  push:
    branches: [main, dev]
  pull_request:

permissions:
  contents: read

env:
  BUILD_PRESET: Release
  CTEST_OUTPUT_ON_FAILURE: 1

jobs:
  # -------------------------------------------------------
  # 1) Build & test (Release) — GCC + Clang
  # -------------------------------------------------------
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up ${{ matrix.compiler }}
        run: |
          sudo apt-get update
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y gcc-12 g++-12
            echo "CC=gcc-12"  >> $GITHUB_ENV
            echo "CXX=g++-12" >> $GITHUB_ENV
          else
            sudo apt-get install -y clang
            echo "CC=clang"   >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          fi

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build \
                                  libboost-all-dev \
                                  nlohmann-json3-dev \
                                  libspdlog-dev \
                                  libmysqlcppconn-dev

      - name: Configure (Release)
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_PRESET }} \
            -DVIX_BUILD_EXAMPLES=ON \
            -DVIX_BUILD_TESTS=ON \
            -DVIX_ORM_USE_MYSQL=ON \
            -DVIX_ORM_BUILD_EXAMPLES=OFF \
            -DVIX_ORM_BUILD_TESTS=OFF

      - name: Build
        run: cmake --build build -j

      - name: Run tests (ctest)
        run: ctest --test-dir build --output-on-failure

  # -------------------------------------------------------
  # 2) ASan/UBSan (GCC only) — Debug + sanitizers
  # -------------------------------------------------------
  asan_ubsan:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Toolchain (GCC)
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-12 g++-12 cmake ninja-build \
                                  libboost-all-dev nlohmann-json3-dev libspdlog-dev libmysqlcppconn-dev
          echo "CC=gcc-12"  >> $GITHUB_ENV
          echo "CXX=g++-12" >> $GITHUB_ENV

      - name: Configure (Debug + Sanitizers)
        env:
          # ASAN: show leaks and stacks; UBSAN: stack traces
          ASAN_OPTIONS: detect_leaks=1,strict_string_checks=1,check_initialization_order=1,strict_init_order=1
          UBSAN_OPTIONS: print_stacktrace=1
        run: |
          cmake -S . -B build-asan -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DVIX_ENABLE_SANITIZERS=ON \
            -DVIX_BUILD_TESTS=ON \
            -DVIX_ORM_USE_MYSQL=ON

      - name: Build
        run: cmake --build build-asan -j

      - name: Run tests (ASan/UBSan)
        env:
          ASAN_OPTIONS: detect_leaks=1,strict_string_checks=1,check_initialization_order=1,strict_init_order=1
          UBSAN_OPTIONS: print_stacktrace=1
        run: ctest --test-dir build-asan --output-on-failure

  # -------------------------------------------------------
  # 3) Valgrind (leak check) — Release, sans sanitizers
  # -------------------------------------------------------
  valgrind:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Toolchain + Deps + Valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-12 g++-12 cmake ninja-build valgrind \
                                  libboost-all-dev nlohmann-json3-dev libspdlog-dev libmysqlcppconn-dev
          echo "CC=gcc-12"  >> $GITHUB_ENV
          echo "CXX=g++-12" >> $GITHUB_ENV

      - name: Configure (Release, no sanitizers)
        run: |
          cmake -S . -B build-val -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DVIX_BUILD_TESTS=ON \
            -DVIX_ENABLE_SANITIZERS=OFF \
            -DVIX_ORM_USE_MYSQL=ON

      - name: Build
        run: cmake --build build-val -j

      - name: Run leak checks with Valgrind
        run: |
          # Essaye d’abord le runner de tests principal (GoogleTest)
          if [ -x "build-val/vix_tests" ]; then
            VAL_TARGET="build-val/vix_tests"
          else
            # Fallback: récupère le premier test binaire détecté par ctest
            VAL_TARGET=$(ctest --test-dir build-val -N | awk '/Test[0-9]+: /{print $NF; exit}')
          fi

          if [ -n "$VAL_TARGET" ] && [ -e "$VAL_TARGET" ]; then
            echo "Running Valgrind on: $VAL_TARGET"
            valgrind --error-exitcode=99 --leak-check=full --show-leak-kinds=all \
                     --track-origins=yes --num-callers=50 --gen-suppressions=all "$VAL_TARGET"
          else
            echo "No test binary found for Valgrind. Listing tests for debug:"
            ctest --test-dir build-val -N || true
            exit 1
          fi

  # -------------------------------------------------------
  # 4) Static analysis — clang-tidy + cppcheck
  # -------------------------------------------------------
  static-analysis:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy cppcheck cmake ninja-build \
                                  gcc-12 g++-12 \
                                  libboost-all-dev nlohmann-json3-dev libspdlog-dev libmysqlcppconn-dev
          echo "CC=gcc-12"  >> $GITHUB_ENV
          echo "CXX=g++-12" >> $GITHUB_ENV

      - name: Configure with clang-tidy
        run: |
          cmake -S . -B build-tidy -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DVIX_BUILD_TESTS=OFF \
            -DVIX_ENABLE_CLANG_TIDY=ON \
            -DVIX_ORM_USE_MYSQL=ON

      - name: Run clang-tidy (build triggers analysis)
        run: cmake --build build-tidy -j

      - name: cppcheck (non-fatal warnings)
        run: |
          cppcheck --enable=warning,style,performance,portability \
                   --std=c++20 --inline-suppr --suppress=unusedFunction \
                   --error-exitcode=0 \
                   -I modules/core/include -I modules/utils/include -I modules/json/include -I modules/orm/include \
                   modules core_build utils_build json_build orm_build 2> cppcheck.txt || true
          echo "cppcheck report (first 200 lines):"
          head -n 200 cppcheck.txt || true
